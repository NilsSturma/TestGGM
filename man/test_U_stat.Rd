% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tests.R
\name{test_U_stat}
\alias{test_U_stat}
\title{Tests the goodness-of-fit of a Gaussian latent tree model}
\usage{
test_U_stat(X, ind_eq, ind_ineq1 = NULL, ind_ineq2 = NULL, N = 5000, E = 1000)
}
\arguments{
\item{X}{Matrix with observed data. Number of columns has to be equal to the number of 
leaves of the postulated tree (i.e. number of observed variables). Each row corresponds to one sample.}

\item{ind_eq}{Representation of the equality constraints that have to be tested. 
Create this object using the function \code{\link{collect_indices}}.}

\item{ind_ineq1}{Representation of the inequality constraints in three variables that have to be tested. 
Create this object using the function \code{\link{collect_indices}}. If \code{NULL} inequality constraints are not tested.}

\item{ind_ineq2}{Representation of the inequality constraints in four variables that have to be tested. 
Create this object using the function \code{\link{collect_indices}}. If \code{NULL} inequality constraints are not tested.}

\item{N}{Integer, computational budget parameter.}

\item{E}{Integer, number of bootstrap iterations.}
}
\value{
Named list with two entries: Test statistic (\code{TSTAT}) and p-value (\code{PVAL}).
}
\description{
This function tests the goodness-of-fit of a given Gaussian latent tree model to observed data.
The parameter space of the model is characterized by polynomial constraints. The involved polynomials are 
estimated by considering subsets of the data. The number of subsets as well as the subsets itself 
are chosen randomly. Each subset is used to form an unbiased estimate of the polynomials. 
To test all constraints simultaneously the test statistic is the maximum of a scaled average 
of the estimates. A Gaussian multiplier bootstrap is used to estimate the limiting distribution 
of the  test statistic and to compute the p-value of the test.
}
\examples{
# Create tree
vertices <- data.frame(name=seq(1,8), type=c(rep(1,5), rep(2,3))) # 1=observed, 2=latent
edges <- data.frame(from=c(1,2,3,4,5,6,7), to=c(8,8,6,6,7,7,8))
tree <- igraph::graph_from_data_frame(edges, directed=FALSE, vertices=vertices)

# Sample data from tree
igraph::V(tree)$var = rep(1,8)
igraph::E(tree)$corr = rep(0.7,7)
X = sample_from_tree(tree, m=5, n=500)

# Determine the representation of the polynomials that have to be tested
res = collect_indices(tree, m=5)
ind_eq = res$ind_eq
ind_ineq1 = res$ind_ineq1
ind_ineq2 = res$ind_ineq2

# Apply the test
test_U_stat(X, ind_eq, ind_ineq1, ind_ineq2)
}
